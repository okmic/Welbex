{"version":3,"sources":["components/auxiliary/sortFunctions.ts","components/Input.tsx","components/Select.tsx","components/Table.tsx","components/Posts.tsx","components/Pagination.tsx","App.tsx","index.tsx"],"names":["_moreOrLess","minmax","posts","setPosts","item","sort","setSort","a","b","amount","distance","memo","_ref","setSelect","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","createElement","Fragment","type","onChange","event","target","onChangeInput","onClick","filter","i","title","_unused","contains","more","less","e","onChangeSelect","date","scope","loading","currentPage","postsPerPage","setStateOrder","stateOrder","currentPosts","setCurrentPosts","_useState3","_useState4","select","useEffect","indexOfLastPost","indexOfFirstPost","slice","_equality","switchMorLess","className","components_Input","Select","map","table","components_Table","key","id","Pagination","totalPosts","paginate","pageNumbers","Math","ceil","push","number","react_router_dom","to","href","dataNames","WelBex","_useState5","_useState6","setLoading","_useState7","_useState8","setCurrentPage","_useState9","_useState11","_useState12","asyncToGenerator","regenerator_default","mark","_callee","res","newData","wrap","_context","prev","next","axios","get","sent","data","concat","floor","random","stop","apply","this","arguments","fetchPosts","style","maxWidth","components_Pagination","length","pageNumber","components_Posts","react_router","path","element","App_WelBex","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f3d9ff22.chunk.js","sourcesContent":["import { Data } from \"../../App\"\r\n\r\n// selects by input parameter which filter to use\r\nconst _moreOrLess = (\r\n    minmax: \"min\" | \"max\",\r\n    posts: Array<Data>,\r\n    setPosts: (p: Array<Data>) => void,\r\n    item: \"amount\" | \"distance\",\r\n    sort: boolean,\r\n    setSort: (s: boolean) => void) => {\r\n    if (minmax === \"min\") {\r\n        switch (item) {\r\n            case \"amount\": {\r\n                if (posts) {\r\n                    //@ts-ignore\r\n                    setPosts(posts.sort((a, b) => a.amount > b.amount ? 1 : -1))\r\n                    setSort(!sort)\r\n                    break\r\n                } else {\r\n                    return posts\r\n                }\r\n            }\r\n            case \"distance\": {\r\n                //@ts-ignore\r\n                setPosts(posts.sort((a, b) => a.distance > b.distance ? 1 : -1))\r\n                setSort(!sort)\r\n                break\r\n            }\r\n            default: {\r\n                return posts\r\n            }\r\n        }\r\n    } else {\r\n        switch (item) {\r\n            case \"amount\": {\r\n                //@ts-ignore\r\n                setPosts(posts.sort((a, b) => a.amount > b.amount ? -1 : 1))\r\n                setSort(!sort)\r\n                break\r\n            }\r\n            case \"distance\": {\r\n                //@ts-ignore\r\n                setPosts(posts.sort((a, b) => a.distance > b.distance ? -1 : 1))\r\n                setSort(!sort)\r\n                break\r\n            }\r\n            default: {\r\n                return posts\r\n            }\r\n        }\r\n    }\r\n}\r\n// checks for equality of two fields \"amount === distance\"\r\nconst _equality = (posts: Array<Data>, setPosts: (p: Array<Data>) => void) => {\r\n    setPosts(posts.filter(i => {\r\n        return i.amount === i.distance\r\n    }))\r\n}\r\n\r\n// search by the entered data at the input.\r\nexport const contains = (\r\n    posts: Array<Data>,\r\n    setPosts: (p: Array<Data>) => void,\r\n    value: string,\r\n    sort: boolean,\r\n    setSort: (s: boolean) => void\r\n    ) => {\r\n    setPosts(posts.filter(i => {\r\n        try {\r\n            return value === i.title\r\n        }\r\n        catch {\r\n            return posts\r\n        }\r\n    }))\r\n    setSort(!sort)\r\n}\r\n\r\n//a function for external use that allows you to determine which filter to use based on input parameters (greater than, less than, equal to)\r\nexport const switchMorLess = (\r\n    type: string,\r\n    posts: Array<Data>,\r\n    setPosts: (p: Array<Data>) => void,\r\n    sort: boolean,\r\n    setSort: (s: boolean) => void,\r\n    setSelect: (s: string) => void\r\n    ) => {\r\n    switch (type) {\r\n        case \"moreAmount\": {\r\n            _moreOrLess(\"max\", posts, setPosts, \"amount\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"lessAmount\": {\r\n            _moreOrLess(\"min\", posts, setPosts, \"amount\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"moreDistance\": {\r\n            _moreOrLess(\"max\", posts, setPosts, \"distance\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"lessDistance\": {\r\n            _moreOrLess(\"min\", posts, setPosts, \"distance\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"equality\": {\r\n            _equality(posts, setPosts)\r\n            setSelect('')\r\n            break\r\n        }\r\n        default: {\r\n            setSelect('')\r\n            return posts\r\n        }\r\n    }\r\n}","import React, { memo, useState } from \"react\"\r\nimport { Data } from \"../App\"\r\nimport { contains } from \"./auxiliary/sortFunctions\"\r\n\r\ntype PropsType = {\r\n    posts: Array<Data>\r\n    setPosts: (p: Array<Data>) => void\r\n    sort: boolean\r\n    setSort: (s: boolean) => void\r\n    setSelect: (s: string) => void\r\n}\r\n\r\nconst Input: React.FC<PropsType> = ({posts, setPosts, sort, setSort, setSelect}) => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(event.target.value)\r\n      }\r\n      const handleSearch = () => {\r\n        // sort contains\r\n        contains(posts, setPosts, value, sort, setSort)\r\n        setSelect('')\r\n      }\r\n\r\n    return <>\r\n        <input type=\"text\" value={value} onChange={(event) => onChangeInput(event)} />\r\n        <button onClick={handleSearch}>search</button>\r\n    </>\r\n}\r\n\r\nexport default memo(Input)","import React, { memo } from 'react'\r\n\r\ntype PropsType = {\r\n    setSelect: (e: string) => void\r\n    more: string\r\n    less: string\r\n}\r\nconst SelectCom: React.FC<PropsType> = ({setSelect, more, less}) => {\r\n\r\n    const onChangeSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelect(e.target.value)\r\n    }\r\n\r\n    return <select onChange={(e) => onChangeSelect(e)}>\r\n    <option value=\"\">Nothing</option>\r\n    <option value={more}>More</option>\r\n    <option value={less}>Less</option>\r\n    <option value=\"equality\">Equality</option>\r\n    </select>\r\n}\r\nexport default memo(SelectCom)","import React, { memo } from \"react\"\r\n\r\ntype PropsType = {\r\n    date: string | undefined\r\n    title: string | undefined\r\n    amount: number | undefined\r\n    distance: number | undefined\r\n}\r\n\r\nconst Table: React.FC<PropsType> = ({ date, title, amount, distance }) => <tbody>\r\n    <tr>\r\n        <th scope=\"row\">{date}</th>\r\n        <td>{title}</td>\r\n        <td>{amount}</td>\r\n        <td>{distance}</td>\r\n    </tr>\r\n</tbody>\r\n\r\nexport default memo(Table)","import React, { memo, useEffect, useState } from 'react'\r\nimport { Data } from '../App';\r\nimport { switchMorLess } from './auxiliary/sortFunctions';\r\nimport Input from './Input';\r\nimport SelectCom  from './Select';\r\nimport Table from './Table';\r\n\r\ntype PropsType = {\r\n  posts: Array<Data>\r\n  loading: boolean\r\n  setPosts: (p: Array<Data>) => void\r\n  currentPage: number\r\n  postsPerPage: number\r\n  sort: boolean\r\n  setSort: (s: boolean ) => void\r\n  setStateOrder: (o: boolean) => void\r\n  stateOrder: boolean\r\n}\r\n\r\nconst Posts: React.FC<PropsType> = ({ posts, loading, setPosts, currentPage, postsPerPage, sort, setSort, setStateOrder, stateOrder}) => {\r\n  \r\n  const [currentPosts, setCurrentPosts] = useState<Array<Data>>([])\r\n  const [select, setSelect] = useState('') \r\n\r\n//get 10 objects for page\r\n  useEffect(() => {\r\n    const indexOfLastPost = currentPage * postsPerPage\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage\r\n    setCurrentPosts(posts.slice(indexOfFirstPost, indexOfLastPost))\r\n  }, [posts, currentPage, sort, postsPerPage])\r\n\r\n  useEffect(() => {\r\n    //sort swiches, a function for external use that allows you to determine which filter to use based on input parameters (greater than, less than, equal to)\r\n    switchMorLess(select, posts, setPosts, sort, setSort, setSelect)\r\n  }, [select])\r\n\r\n  const handleSubmit = () => {\r\n    setStateOrder(!stateOrder)\r\n    setSort(!sort)\r\n  }\r\n  \r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return <table className=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">Date</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Amount</th>\r\n        <th scope=\"col\">Distance</th>\r\n      </tr>\r\n    </thead>\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">\r\n            <button onClick={handleSubmit}>Remove Filters<sup>&#10006;</sup></button>\r\n        </th>\r\n        <th scope=\"col\">\r\n          <Input posts={posts} setPosts={setPosts} \r\n          setSelect={setSelect} setSort={setSort}\r\n          sort={sort} />\r\n        </th>\r\n        <th scope=\"col\">\r\n        <SelectCom less='lessAmount' more='moreAmount' setSelect={setSelect} />\r\n        </th>\r\n        <th scope=\"col\">\r\n        <SelectCom less='lessDistance' more='moreDistance' setSelect={setSelect} />\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    {currentPosts.map(table => <Table key={table.id} \r\n    date={table.date} \r\n    title={table.title} \r\n    amount={table.amount} \r\n    distance={table.distance} />)}\r\n  </table>\r\n}\r\n\r\nexport default memo(Posts)\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  postsPerPage: number\r\n  totalPosts: number\r\n  paginate: (n: number) => void\r\n}\r\n\r\nconst Pagination: React.FC<PropsType> = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = []\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i)\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <NavLink to=\"\">\r\n              <a onClick={() => paginate(number)} href='!#' className='page-link'>\r\n                {number}\r\n              </a>\r\n            </NavLink>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect, memo } from 'react'\r\nimport Posts from './components/Posts'\r\nimport Pagination from './components/Pagination'\r\nimport axios from 'axios'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\n\r\nconst dataNames = [\"welbex\", \"ozon\", \"apple\", \"microsoft\", \"google\", \"github\", \"meta\", \"tesla\", \"windows\", \"linux\"]\r\n\r\nexport type Data = {\r\n  userId?: number\r\n  id: number\r\n  title: string\r\n  date?: string\r\n  body?: string\r\n  amount?: number\r\n  distance?: number\r\n}\r\n\r\nconst WelBex = () => {\r\n  const [posts, setPosts] = useState<Array<Data>>([])\r\n  // stateOrder the change results in a new data fetch from the jsonplaceholder\r\n  const [stateOrder, setStateOrder] = useState(true)\r\n  const [loading, setLoading] = useState(false)\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [postsPerPage] = useState(10)\r\n  const [sort, setSort] = useState(true)\r\n\r\n\r\n  const updateData = (data: Array<Data>) => {\r\n    // Data generation\r\n    return data.map(i => ({\r\n      id: i.id,\r\n      date: `0${(Math.floor(Math.random() * 7) + 1)}.0${(Math.floor(Math.random() * 8) + 1)}.2021`,\r\n      title: dataNames[Math.floor(Math.random() * 10)],\r\n      amount: Math.floor(Math.random() * 7) + 1,\r\n      distance: Math.floor(Math.random() * 7) + 1\r\n    }))\r\n  }\r\n\r\n  // get data jsonplaceholder\r\n  useEffect(() => {\r\n    setPosts([])\r\n    const fetchPosts = async () => {\r\n      setLoading(true)\r\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\r\n      const newData: any = updateData(res.data)\r\n      setPosts(newData)\r\n      setLoading(false)\r\n    }\r\n    fetchPosts()\r\n  }, [stateOrder])\r\n\r\n  // Change page\r\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\r\n\r\n  return <div className='container mt-5' style={{ maxWidth: \"95vw\" }}>\r\n    <h1 className='text-primary mb-3'>WELBEX</h1>\r\n    <Pagination\r\n      postsPerPage={postsPerPage}\r\n      totalPosts={posts.length}\r\n      paginate={paginate}\r\n    />\r\n    <Posts\r\n      posts={posts}\r\n      loading={loading}\r\n      setPosts={setPosts}\r\n      setStateOrder={setStateOrder}\r\n      stateOrder={stateOrder}\r\n      currentPage={currentPage}\r\n      postsPerPage={postsPerPage}\r\n      sort={sort}\r\n      setSort={setSort}\r\n    />\r\n  </div>\r\n}\r\n\r\nconst App = () => <BrowserRouter>\r\n  <Routes>\r\n    <Route path=\"*\" element={<WelBex />} />\r\n  </Routes>\r\n</BrowserRouter>\r\n\r\nexport default memo(App)\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}