{"version":3,"sources":["auxiliary/sortFunctions.ts","components/Select.tsx","components/Posts.tsx","components/Pagination.tsx","App.tsx","index.tsx"],"names":["_moreOrLess","minmax","posts","setPosts","item","sort","setSort","a","b","amount","distance","memo","_ref","setSelect","more","less","react_default","createElement","onChange","e","target","value","onChangeSelect","loading","currentPage","postsPerPage","setStateOrder","stateOrder","_useState","useState","_useState2","Object","slicedToArray","currentPosts","setCurrentPosts","_useState3","_useState4","select","_useState5","_useState6","setValue","useEffect","indexOfLastPost","indexOfFirstPost","slice","type","filter","i","_equality","switchMorLess","className","scope","onClick","event","onChangeInput","title","_unused","contains","Select","map","table","key","id","date","Pagination","totalPosts","paginate","pageNumbers","Math","ceil","push","number","react_router_dom","to","href","dataNames","WelBex","setLoading","_useState7","_useState8","setCurrentPage","_useState9","_useState11","_useState12","asyncToGenerator","regenerator_default","mark","_callee","res","newData","wrap","_context","prev","next","axios","get","sent","data","concat","floor","random","stop","apply","this","arguments","fetchPosts","components_Pagination","length","pageNumber","components_Posts","App","react_router","path","element","App_WelBex","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.54b421bd.chunk.js","sourcesContent":["import { Data } from \"../App\"\r\n\r\nconst _moreOrLess = (\r\n    minmax: \"min\" | \"max\",\r\n    posts: Array<Data>,\r\n    setPosts: (p: Array<Data>) => void,\r\n    item: \"amount\" | \"distance\",\r\n    sort: boolean,\r\n    setSort: (s: boolean) => void) => {\r\n    if (minmax === \"min\") {\r\n        switch (item) {\r\n            case \"amount\": {\r\n                if (posts) {\r\n                    //@ts-ignore\r\n                    setPosts(posts.sort((a, b) => a.amount > b.amount ? 1 : -1))\r\n                    setSort(!sort)\r\n                    break\r\n                } else {\r\n                    return posts\r\n                }\r\n            }\r\n            case \"distance\": {\r\n                //@ts-ignore\r\n                setPosts(posts.sort((a, b) => a.distance > b.distance ? 1 : -1))\r\n                setSort(!sort)\r\n                break\r\n            }\r\n            default: {\r\n                return posts\r\n            }\r\n        }\r\n    } else {\r\n        switch (item) {\r\n            case \"amount\": {\r\n                //@ts-ignore\r\n                setPosts(posts.sort((a, b) => a.amount > b.amount ? -1 : 1))\r\n                setSort(!sort)\r\n                break\r\n            }\r\n            case \"distance\": {\r\n                //@ts-ignore\r\n                setPosts(posts.sort((a, b) => a.distance > b.distance ? -1 : 1))\r\n                setSort(!sort)\r\n                break\r\n            }\r\n            default: {\r\n                return posts\r\n            }\r\n        }\r\n    }\r\n}\r\nconst _equality = (posts: Array<Data>, setPosts: (p: Array<Data>) => void) => {\r\n    setPosts(posts.filter(i => {\r\n        return i.amount === i.distance\r\n    }))\r\n}\r\n\r\nexport const contains = (\r\n    posts: Array<Data>,\r\n    setPosts: (p: Array<Data>) => void,\r\n    value: string,\r\n    sort: boolean,\r\n    setSort: (s: boolean) => void\r\n    ) => {\r\n    setPosts(posts.filter(i => {\r\n        try {\r\n            return value === i.title\r\n        }\r\n        catch {\r\n            return posts\r\n        }\r\n    }))\r\n    setSort(!sort)\r\n}\r\n\r\nexport const switchMorLess = (\r\n    type: string,\r\n    posts: Array<Data>,\r\n    setPosts: (p: Array<Data>) => void,\r\n    sort: boolean,\r\n    setSort: (s: boolean) => void,\r\n    setSelect: (s: string) => void\r\n    ) => {\r\n    switch (type) {\r\n        case \"moreAmount\": {\r\n            _moreOrLess(\"max\", posts, setPosts, \"amount\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"lessAmount\": {\r\n            _moreOrLess(\"min\", posts, setPosts, \"amount\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"moreDistance\": {\r\n            _moreOrLess(\"max\", posts, setPosts, \"distance\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"lessDistance\": {\r\n            _moreOrLess(\"min\", posts, setPosts, \"distance\", sort, setSort)\r\n            setSelect('')\r\n            break\r\n        }\r\n        case \"equality\": {\r\n            _equality(posts, setPosts)\r\n            setSelect('')\r\n            break\r\n        }\r\n        default: {\r\n            setSelect('')\r\n            return posts\r\n        }\r\n    }\r\n}","import React, { memo } from 'react'\r\n\r\ntype PropsType = {\r\n    setSelect: (e: string) => void\r\n    more: string\r\n    less: string\r\n}\r\nconst SelectCom: React.FC<PropsType> = ({setSelect, more, less}) => {\r\n\r\n    const onChangeSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelect(e.target.value)\r\n    }\r\n\r\n    return <select onChange={(e) => onChangeSelect(e)}>\r\n    <option value=\"\">Nothing</option>\r\n    <option value={more}>More</option>\r\n    <option value={less}>Less</option>\r\n    <option value=\"equality\">Equality</option>\r\n    </select>\r\n}\r\nexport default memo(SelectCom)","import React, { memo, useEffect, useState } from 'react'\r\nimport { Data } from '../App';\r\nimport { contains, switchMorLess } from '../auxiliary/sortFunctions';\r\nimport SelectCom  from './Select';\r\n\r\ntype PropsType = {\r\n  posts: Array<Data>\r\n  loading: boolean\r\n  setPosts: (p: Array<Data>) => void\r\n  currentPage: number\r\n  postsPerPage: number\r\n  sort: boolean\r\n  setSort: (s: boolean) => void\r\n  setStateOrder: (o: boolean) => void\r\n  stateOrder: boolean\r\n}\r\n\r\nconst Posts: React.FC<PropsType> = ({ posts, loading, setPosts, currentPage, postsPerPage, sort, setSort, setStateOrder, stateOrder}) => {\r\n  \r\n  const [currentPosts, setCurrentPosts] = useState<Array<Data>>([])\r\n  const [select, setSelect] = useState('') \r\n  const [value, setValue] = useState('')\r\n\r\n  const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(event.target.value)\r\n  }\r\n  const handleSearch = () => {\r\n    contains(posts, setPosts, value, sort, setSort)\r\n    setSelect('')\r\n  }\r\n\r\n//get 10 objects for page\r\n  useEffect(() => {\r\n    const indexOfLastPost = currentPage * postsPerPage\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage\r\n    setCurrentPosts(posts.slice(indexOfFirstPost, indexOfLastPost))\r\n  }, [posts, currentPage, sort, postsPerPage])\r\n\r\n  useEffect(() => {\r\n    //sort swiches\r\n    switchMorLess(select, posts, setPosts, sort, setSort, setSelect)\r\n  }, [select])\r\n\r\n  \r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return <table className=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">Date</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Amount</th>\r\n        <th scope=\"col\">Distance</th>\r\n      </tr>\r\n    </thead>\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">\r\n            <button onClick={() => setStateOrder(!stateOrder)}>Remove Filters <sup>&#10006;</sup></button>\r\n        </th>\r\n        <th scope=\"col\">\r\n          <input type=\"text\" value={value} onChange={(event) => onChangeInput(event)} />\r\n          <button onClick={handleSearch}>search</button>\r\n        </th>\r\n        <th scope=\"col\">\r\n        <SelectCom less='moreAmount' more='lessAmount' setSelect={setSelect} />\r\n        </th>\r\n        <th scope=\"col\">\r\n        <SelectCom less='lessDistance' more='moreDistance' setSelect={setSelect} />\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    {currentPosts.map(table => <tbody key={table.id}>\r\n      <tr>\r\n        <th scope=\"row\">{table.date}</th>\r\n        <td>{table.title}</td>\r\n        <td>{table.amount}</td>\r\n        <td>{table.distance}</td>\r\n      </tr>\r\n    </tbody>)}\r\n  </table>\r\n}\r\n\r\nexport default memo(Posts)\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  postsPerPage: number\r\n  totalPosts: number\r\n  paginate: (n: number) => void\r\n}\r\n\r\nconst Pagination: React.FC<PropsType> = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = []\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i)\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <NavLink to=\"\">\r\n              <a onClick={() => paginate(number)} href='!#' className='page-link'>\r\n                {number}\r\n              </a>\r\n            </NavLink>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from 'react'\r\nimport Posts from './components/Posts'\r\nimport Pagination from './components/Pagination'\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\n\r\nconst dataNames = [\"welbex\", \"ozon\", \"apple\", \"microsoft\", \"google\", \"github\", \"meta\", \"tesla\", \"windows\", \"linux\"]\r\n\r\nexport type Data = { \r\n  userId?: number\r\n  id: number\r\n  title: string\r\n  date?: string\r\n  body?: string\r\n  amount?: string\r\n  distance?: string\r\n}\r\n\r\nconst WelBex = () => {\r\n  const [posts, setPosts] = useState<Array<Data>>([]);\r\n  const [stateOrder, setStateOrder] = useState(true)\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(10)\r\n  const [sort, setSort] = useState(true)\r\n\r\n\r\n  const updateData = (data: Array<Data>) => {\r\n// Data generation\r\n    return data.map(i => ({\r\n      id: i.id,\r\n      date: `0${(Math.floor(Math.random() * 7) + 1)}.0${(Math.floor(Math.random() * 8) + 1)}.2021`,\r\n      title: dataNames[Math.floor(Math.random() * 10)],\r\n      amount: Math.floor(Math.random() * 7) + 1,\r\n      distance: Math.floor(Math.random() * 7) + 1\r\n    })) \r\n  }\r\n\r\n  useEffect(() => {\r\n    setPosts([])\r\n    const fetchPosts = async () => {\r\n      setLoading(true)\r\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\r\n      const newData: any = updateData(res.data)\r\n      setPosts(newData) \r\n      setLoading(false)\r\n    }\r\n    fetchPosts()\r\n    \r\n  }, [stateOrder])\r\n\r\n  // Change page\r\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber)\r\n\r\n  return <div className='container mt-5'>\r\n      <h1 className='text-primary mb-3'>WELBEX</h1>\r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n      <Posts \r\n      posts={posts} \r\n      loading={loading} \r\n      setPosts={setPosts}\r\n      setStateOrder={setStateOrder}\r\n      stateOrder={stateOrder}\r\n      currentPage={currentPage}\r\n      postsPerPage={postsPerPage}\r\n      sort={sort}\r\n      setSort={setSort}\r\n      />\r\n    </div>\r\n}\r\n\r\nconst App = () => <BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"*\" element={<WelBex/>} />\r\n    </Routes>\r\n  </BrowserRouter>\r\n\r\nexport default App\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}